/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ERC721VaultFactoryInterface extends utils.Interface {
  contractName: "ERC721VaultFactory";
  functions: {
    "allVaults(uint256)": FunctionFragment;
    "allVaultsLength()": FunctionFragment;
    "createVault(address)": FunctionFragment;
    "getVault(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allVaultsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "createVault", values: [string]): string;
  encodeFunctionData(functionFragment: "getVault", values: [string]): string;

  decodeFunctionResult(functionFragment: "allVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allVaultsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;

  events: {
    "CreateVault(string,string,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateVault"): EventFragment;
}

export type CreateVaultEvent = TypedEvent<
  [string, string, string, string],
  { name: string; symbol: string; asset: string; vault: string }
>;

export type CreateVaultEventFilter = TypedEventFilter<CreateVaultEvent>;

export interface ERC721VaultFactory extends BaseContract {
  contractName: "ERC721VaultFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721VaultFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allVaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    allVaultsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createVault(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVault(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  allVaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allVaultsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createVault(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVault(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allVaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    allVaultsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createVault(asset: string, overrides?: CallOverrides): Promise<void>;

    getVault(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CreateVault(string,string,address,address)"(
      name?: null,
      symbol?: null,
      asset?: string | null,
      vault?: string | null
    ): CreateVaultEventFilter;
    CreateVault(
      name?: null,
      symbol?: null,
      asset?: string | null,
      vault?: string | null
    ): CreateVaultEventFilter;
  };

  estimateGas: {
    allVaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allVaultsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createVault(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVault(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allVaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allVaultsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVault(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
