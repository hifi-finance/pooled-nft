/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721Pool, ERC721PoolInterface } from "../ERC721Pool";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ERC20Wnft__Forbidden",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC20Wnft__InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC20Wnft__PermitExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC721Pool__InsufficientIn",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC721Pool__InvalidTo",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "Initialize",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "asset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "holdingAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "holdingsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "address",
        name: "asset_",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "withdrawWithSignature",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50336080526080516115ff61003760003960008181610348015261044901526115ff6000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806370a08231116100d8578063a9059cbb1161008c578063d505accf11610066578063d505accf1461036a578063dd62ed3e1461037d578063e037a2c7146103a857600080fd5b8063a9059cbb1461031d578063afee80d914610330578063c45a01551461034357600080fd5b806391c03b1b116100bd57806391c03b1b146102ef57806395d89b4114610302578063983d95ce1461030a57600080fd5b806370a08231146102af5780637ecebe00146102cf57600080fd5b806330adf81f1161013a57806338d52e0f1161011457806338d52e0f1461025157806354fd4d501461027c578063598b8e711461029c57600080fd5b806330adf81f14610207578063313ce5671461022e5780633644e5151461024857600080fd5b8063095ea7b31161016b578063095ea7b3146101ba57806318160ddd146101dd57806323b872dd146101f457600080fd5b806306fdde0314610187578063077f224a146101a5575b600080fd5b61018f6103b0565b60405161019c9190610fa7565b60405180910390f35b6101b86101b33660046110c4565b61043e565b005b6101cd6101c8366004611138565b6105e0565b604051901515815260200161019c565b6101e660005481565b60405190815260200161019c565b6101cd610202366004611162565b6105f7565b6101e67f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610236601281565b60405160ff909116815260200161019c565b6101e660055481565b600754610264906001600160a01b031681565b6040516001600160a01b03909116815260200161019c565b61018f604051806040016040528060018152602001603160f81b81525081565b6101b86102aa3660046111ea565b61068c565b6101e66102bd36600461122c565b60016020526000908152604090205481565b6101e66102dd36600461122c565b60066020526000908152604090205481565b6101b86102fd366004611247565b6107c4565b61018f6107f0565b6101b86103183660046111ea565b6107fd565b6101cd61032b366004611138565b610929565b6101e661033e3660046112ce565b610936565b6102647f000000000000000000000000000000000000000000000000000000000000000081565b6101b86103783660046112e7565b610943565b6101e661038b36600461135a565b600260209081526000928352604080842090915290825290205481565b6101e6610b04565b600380546103bd9061138d565b80601f01602080910402602001604051908101604052809291908181526020018280546103e99061138d565b80156104365780601f1061040b57610100808354040283529160200191610436565b820191906000526020600020905b81548152906001019060200180831161041957829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461048757604051632dc9a2c560e11b815260040160405180910390fd5b825161049a906003906020860190610f0e565b5081516104ae906004906020850190610f0e565b50600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905560405146907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90610515906003906113c7565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c00160408051601f198184030181529082905280516020909101206005556007546001600160a01b0316907f1ad5258fd94fd6ce147b9bf86c9fa73f75ad24a4838ae307465cb85e4f88a892906105d2906003906004906114b0565b60405180910390a250505050565b60006105ed338484610b15565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610677576001600160a01b03841660009081526002602090815260408083203384529091529020546106529083906114f4565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610682848484610b77565b5060019392505050565b60008190036106ae5760405163251e5fcb60e11b815260040160405180910390fd5b60005b818110156107695760008383838181106106cd576106cd61150b565b9050602002013590506106ea816008610c1f90919063ffffffff16565b6106f357600080fd5b6007546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561074557600080fd5b505af1158015610759573d6000803e3d6000fd5b50505050816001019150506106b1565b506107853361078083670de0b6b3a7640000611521565b610c32565b7f42b71104669d6b9b0ed0596b13bf72373d2139566545df2b53b72931c69657158282336040516107b893929190611540565b60405180910390a15050565b6107e06107d984670de0b6b3a7640000611521565b8383610cc3565b6107ea84846107fd565b50505050565b600480546103bd9061138d565b600081900361081f5760405163251e5fcb60e11b815260040160405180910390fd5b61083a3361083583670de0b6b3a7640000611521565b610cf4565b60005b818110156108f55760008383838181106108595761085961150b565b905060200201359050610876816008610d8090919063ffffffff16565b61087f57600080fd5b6007546040516323b872dd60e01b8152306004820152336024820152604481018390526001600160a01b03909116906323b872dd90606401600060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050508160010191505061083d565b507f7bba1845c3eeae05ee144781cd5e90a7f295e8e097186d1ca50d2fd3c78ae9148282336040516107b893929190611540565b60006105ed338484610b77565b60006105f1600883610d8c565b4284101561096457604051639436330960e01b815260040160405180910390fd5b6005546001600160a01b038816600090815260066020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876109b7836115ab565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001610a3092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015610a9b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580610ad05750886001600160a01b0316816001600160a01b031614155b15610aee5760405163068d22f760e11b815260040160405180910390fd5b610af9898989610b15565b505050505050505050565b6000610b106008610d98565b905090565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040902054610b9b9082906114f4565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610bcb9082906115c4565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b6a9085815260200190565b6000610c2b8383610da2565b9392505050565b80600054610c4091906115c4565b60009081556001600160a01b038316815260016020526040902054610c669082906115c4565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610cb79085815260200190565b60405180910390a35050565b805115610cef5760208101516040820151606083015160001a610ceb33308888858888610943565b5050505b505050565b6001600160a01b038216600090815260016020526040902054610d189082906114f4565b6001600160a01b03831660009081526001602052604081209190915554610d409082906114f4565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610cb7565b6000610c2b8383610df1565b6000610c2b8383610ee4565b60006105f1825490565b6000818152600183016020526040812054610de9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f1565b5060006105f1565b60008181526001830160205260408120548015610eda576000610e156001836114f4565b8554909150600090610e29906001906114f4565b9050818114610e8e576000866000018281548110610e4957610e4961150b565b9060005260206000200154905080876000018481548110610e6c57610e6c61150b565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610e9f57610e9f6115dc565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f1565b60009150506105f1565b6000826000018281548110610efb57610efb61150b565b9060005260206000200154905092915050565b828054610f1a9061138d565b90600052602060002090601f016020900481019282610f3c5760008555610f82565b82601f10610f5557805160ff1916838001178555610f82565b82800160010185558215610f82579182015b82811115610f82578251825591602001919060010190610f67565b50610f8e929150610f92565b5090565b5b80821115610f8e5760008155600101610f93565b600060208083528351808285015260005b81811015610fd457858101830151858201604001528201610fb8565b81811115610fe6576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561102d5761102d610ffc565b604051601f8501601f19908116603f0116810190828211818310171561105557611055610ffc565b8160405280935085815286868601111561106e57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261109957600080fd5b610c2b83833560208501611012565b80356001600160a01b03811681146110bf57600080fd5b919050565b6000806000606084860312156110d957600080fd5b833567ffffffffffffffff808211156110f157600080fd5b6110fd87838801611088565b9450602086013591508082111561111357600080fd5b5061112086828701611088565b92505061112f604085016110a8565b90509250925092565b6000806040838503121561114b57600080fd5b611154836110a8565b946020939093013593505050565b60008060006060848603121561117757600080fd5b611180846110a8565b925061118e602085016110a8565b9150604084013590509250925092565b60008083601f8401126111b057600080fd5b50813567ffffffffffffffff8111156111c857600080fd5b6020830191508360208260051b85010111156111e357600080fd5b9250929050565b600080602083850312156111fd57600080fd5b823567ffffffffffffffff81111561121457600080fd5b6112208582860161119e565b90969095509350505050565b60006020828403121561123e57600080fd5b610c2b826110a8565b6000806000806060858703121561125d57600080fd5b843567ffffffffffffffff8082111561127557600080fd5b6112818883890161119e565b90965094506020870135935060408701359150808211156112a157600080fd5b508501601f810187136112b357600080fd5b6112c287823560208401611012565b91505092959194509250565b6000602082840312156112e057600080fd5b5035919050565b600080600080600080600060e0888a03121561130257600080fd5b61130b886110a8565b9650611319602089016110a8565b95506040880135945060608801359350608088013560ff8116811461133d57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561136d57600080fd5b611376836110a8565b9150611384602084016110a8565b90509250929050565b600181811c908216806113a157607f821691505b6020821081036113c157634e487b7160e01b600052602260045260246000fd5b50919050565b60008083546113d58161138d565b600182811680156113ed57600181146113fe5761142d565b60ff1984168752828701945061142d565b8760005260208060002060005b858110156114245781548a82015290840190820161140b565b50505082870194505b50929695505050505050565b600081546114468161138d565b8085526020600183811680156114635760018114611477576114a5565b60ff198516888401526040880195506114a5565b866000528260002060005b8581101561149d5781548a8201860152908301908401611482565b890184019650505b505050505092915050565b6040815260006114c36040830185611439565b82810360208401526114d58185611439565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611506576115066114de565b500390565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561153b5761153b6114de565b500290565b6040815282604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84111561157957600080fd5b8360051b80866060850137606081840101905060008152809150506001600160a01b0383166020830152949350505050565b6000600182016115bd576115bd6114de565b5060010190565b600082198211156115d7576115d76114de565b500190565b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080d000a";

type ERC721PoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721PoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721Pool__factory extends ContractFactory {
  constructor(...args: ERC721PoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC721Pool";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721Pool> {
    return super.deploy(overrides || {}) as Promise<ERC721Pool>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC721Pool {
    return super.attach(address) as ERC721Pool;
  }
  connect(signer: Signer): ERC721Pool__factory {
    return super.connect(signer) as ERC721Pool__factory;
  }
  static readonly contractName: "ERC721Pool";
  public readonly contractName: "ERC721Pool";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721PoolInterface {
    return new utils.Interface(_abi) as ERC721PoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Pool {
    return new Contract(address, _abi, signerOrProvider) as ERC721Pool;
  }
}
