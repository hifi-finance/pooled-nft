/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Vault, VaultInterface } from "../Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "address",
        name: "asset_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Vault__InOutMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "Vault__InsufficientIn",
    type: "error",
  },
  {
    inputs: [],
    name: "Vault__InvalidTo",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "inIds",
        type: "uint256[]",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "Mint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "inAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "outIds",
        type: "uint256[]",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "Redeem",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "inIds",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "outIds",
        type: "uint256[]",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "asset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "holdingAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "holdingsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "inIds",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "inAmount",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "outIds",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "redeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "inIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "outIds",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620018c9380380620018c9833981016040819052620000349162000203565b8251839083906200004d90600390602085019062000090565b5080516200006390600490602084019062000090565b5050600580546001600160a01b0319166001600160a01b03939093169290921790915550620002cc915050565b8280546200009e9062000290565b90600052602060002090601f016020900481019282620000c257600085556200010d565b82601f10620000dd57805160ff19168380011785556200010d565b828001600101855582156200010d579182015b828111156200010d578251825591602001919060010190620000f0565b506200011b9291506200011f565b5090565b5b808211156200011b576000815560010162000120565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015e57600080fd5b81516001600160401b03808211156200017b576200017b62000136565b604051601f8301601f19908116603f01168101908282118183101715620001a657620001a662000136565b81604052838152602092508683858801011115620001c357600080fd5b600091505b83821015620001e75785820183015181830184015290820190620001c8565b83821115620001f95760008385830101525b9695505050505050565b6000806000606084860312156200021957600080fd5b83516001600160401b03808211156200023157600080fd5b6200023f878388016200014c565b945060208601519150808211156200025657600080fd5b5062000265868287016200014c565b604086015190935090506001600160a01b03811681146200028557600080fd5b809150509250925092565b600181811c90821680620002a557607f821691505b602082108103620002c657634e487b7160e01b600052602260045260246000fd5b50919050565b6115ed80620002dc6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806370a08231116100b2578063a9059cbb11610081578063c4c9741b11610066578063c4c9741b14610265578063dd62ed3e14610278578063e037a2c7146102b157600080fd5b8063a9059cbb1461023f578063afee80d91461025257600080fd5b806370a08231146101e857806395d89b4114610211578063a3ff19a414610219578063a457c2d71461022c57600080fd5b8063313ce567116100ee578063313ce5671461018657806338d52e0f1461019557806339509351146101c05780635c5b69a9146101d357600080fd5b806306fdde0314610120578063095ea7b31461013e57806318160ddd1461016157806323b872dd14610173575b600080fd5b6101286102b9565b6040516101359190611199565b60405180910390f35b61015161014c36600461120a565b61034b565b6040519015158152602001610135565b6002545b604051908152602001610135565b610151610181366004611234565b610365565b60405160128152602001610135565b6005546101a8906001600160a01b031681565b6040516001600160a01b039091168152602001610135565b6101516101ce36600461120a565b610389565b6101e66101e13660046112bc565b6103c8565b005b6101656101f6366004611310565b6001600160a01b031660009081526020819052604090205490565b61012861052a565b6101e661022736600461132b565b610539565b61015161023a36600461120a565b6107bd565b61015161024d36600461120a565b61086c565b6101656102603660046113ac565b61087a565b6101e66102733660046113c5565b610887565b610165610286366004611423565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610165610a0e565b6060600380546102c890611456565b80601f01602080910402602001604051908101604052809291908181526020018280546102f490611456565b80156103415780601f1061031657610100808354040283529160200191610341565b820191906000526020600020905b81548152906001019060200180831161032457829003601f168201915b5050505050905090565b600033610359818585610a1f565b60019150505b92915050565b600033610373858285610b44565b61037e858585610bd6565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061035990829086906103c39087906114a6565b610a1f565b8160008190036103eb57604051631d90bf4160e21b815260040160405180910390fd5b6001600160a01b0382166104125760405163e398b79960e01b815260040160405180910390fd5b60005b818110156104c5576000858583818110610431576104316114be565b90506020020135905061044e816006610dd390919063ffffffff16565b506005546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401600060405180830381600087803b1580156104a157600080fd5b505af11580156104b5573d6000803e3d6000fd5b5050505081600101915050610415565b506104e1826104dc83670de0b6b3a76400006114d4565b610de6565b816001600160a01b03167ffe3e53059d987c63ffe4d5a45d9130265a9417099abcedf2b2a264a9c750823e858560405161051c929190611542565b60405180910390a250505050565b6060600480546102c890611456565b8382600082900361055d57604051631d90bf4160e21b815260040160405180910390fd5b80821461057d57604051639853f1fd60e01b815260040160405180910390fd5b6001600160a01b0383166105a45760405163e398b79960e01b815260040160405180910390fd5b60005b8281101561076c576105db8888838181106105c4576105c46114be565b905060200201356006610dd390919063ffffffff16565b506005546001600160a01b03166323b872dd33308b8b86818110610601576106016114be565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561067057600080fd5b505af1158015610684573d6000803e3d6000fd5b505050506106b486868381811061069d5761069d6114be565b905060200201356006610ec590919063ffffffff16565b506005546001600160a01b03166323b872dd30868989868181106106da576106da6114be565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b505050508060010190506105a7565b50826001600160a01b03167f0482325a8e0d87a795f1b932f4864348776133a209264b40b05b9a428dcd799b888888886040516107ac949392919061155e565b60405180910390a250505050505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561085f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61037e8286868403610a1f565b600033610359818585610bd6565b600061035f600683610ed1565b8160008590036108aa57604051631d90bf4160e21b815260040160405180910390fd5b6108bc81670de0b6b3a76400006114d4565b85146108db57604051639853f1fd60e01b815260040160405180910390fd5b6001600160a01b0382166109025760405163e398b79960e01b815260040160405180910390fd5b61090c3386610edd565b60005b818110156109c157600085858381811061092b5761092b6114be565b905060200201359050610948816006610ec590919063ffffffff16565b506005546040516323b872dd60e01b81523060048201526001600160a01b03868116602483015260448201849052909116906323b872dd90606401600060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050508160010191505061090f565b50816001600160a01b03167f4a9f43dc50f4433ceaad8dd954b2eb7ab081462d4e95eedfc853d76840d766428686866040516109ff93929190611590565b60405180910390a25050505050565b6000610a1a6006611023565b905090565b6001600160a01b038316610a815760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610856565b6001600160a01b038216610ae25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610856565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610bd05781811015610bc35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610856565b610bd08484848403610a1f565b50505050565b6001600160a01b038316610c525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610856565b6001600160a01b038216610cb45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610856565b6001600160a01b03831660009081526020819052604090205481811015610d435760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610856565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610d7a9084906114a6565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610dc691815260200190565b60405180910390a3610bd0565b6000610ddf838361102d565b9392505050565b6001600160a01b038216610e3c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610856565b8060026000828254610e4e91906114a6565b90915550506001600160a01b03821660009081526020819052604081208054839290610e7b9084906114a6565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000610ddf838361107c565b6000610ddf838361116f565b6001600160a01b038216610f3d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610856565b6001600160a01b03821660009081526020819052604090205481811015610fb15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610856565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610fe09084906115b3565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b37565b600061035f825490565b60008181526001830160205260408120546110745750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561035f565b50600061035f565b600081815260018301602052604081205480156111655760006110a06001836115b3565b85549091506000906110b4906001906115b3565b90508181146111195760008660000182815481106110d4576110d46114be565b90600052602060002001549050808760000184815481106110f7576110f76114be565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061112a5761112a6115ca565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061035f565b600091505061035f565b6000826000018281548110611186576111866114be565b9060005260206000200154905092915050565b600060208083528351808285015260005b818110156111c6578581018301518582016040015282016111aa565b818111156111d8576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461120557600080fd5b919050565b6000806040838503121561121d57600080fd5b611226836111ee565b946020939093013593505050565b60008060006060848603121561124957600080fd5b611252846111ee565b9250611260602085016111ee565b9150604084013590509250925092565b60008083601f84011261128257600080fd5b50813567ffffffffffffffff81111561129a57600080fd5b6020830191508360208260051b85010111156112b557600080fd5b9250929050565b6000806000604084860312156112d157600080fd5b833567ffffffffffffffff8111156112e857600080fd5b6112f486828701611270565b90945092506113079050602085016111ee565b90509250925092565b60006020828403121561132257600080fd5b610ddf826111ee565b60008060008060006060868803121561134357600080fd5b853567ffffffffffffffff8082111561135b57600080fd5b61136789838a01611270565b9097509550602088013591508082111561138057600080fd5b5061138d88828901611270565b90945092506113a09050604087016111ee565b90509295509295909350565b6000602082840312156113be57600080fd5b5035919050565b600080600080606085870312156113db57600080fd5b84359350602085013567ffffffffffffffff8111156113f957600080fd5b61140587828801611270565b90945092506114189050604086016111ee565b905092959194509250565b6000806040838503121561143657600080fd5b61143f836111ee565b915061144d602084016111ee565b90509250929050565b600181811c9082168061146a57607f821691505b60208210810361148a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156114b9576114b9611490565b500190565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156114ee576114ee611490565b500290565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561152557600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020815260006115566020830184866114f3565b949350505050565b6040815260006115726040830186886114f3565b82810360208401526115858185876114f3565b979650505050505050565b8381526040602082015260006115aa6040830184866114f3565b95945050505050565b6000828210156115c5576115c5611490565b500390565b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080d000a";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Vault";
  }

  deploy(
    name_: string,
    symbol_: string,
    asset_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Vault> {
    return super.deploy(
      name_,
      symbol_,
      asset_,
      overrides || {}
    ) as Promise<Vault>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    asset_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, asset_, overrides || {});
  }
  attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }
  static readonly contractName: "Vault";
  public readonly contractName: "Vault";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
