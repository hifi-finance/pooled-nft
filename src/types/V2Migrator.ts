/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface V2MigratorInterface extends utils.Interface {
  contractName: "V2Migrator";
  functions: {
    "migrate(address,uint256[])": FunctionFragment;
    "v1PoolFactory()": FunctionFragment;
    "v2PoolFactory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "v1PoolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "v2PoolFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "v1PoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "v2PoolFactory",
    data: BytesLike
  ): Result;

  events: {
    "Migrate(address,address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
}

export type MigrateEvent = TypedEvent<
  [string, string, BigNumber[]],
  { asset: string; caller: string; ids: BigNumber[] }
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export interface V2Migrator extends BaseContract {
  contractName: "V2Migrator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: V2MigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    migrate(
      asset: string,
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    v1PoolFactory(overrides?: CallOverrides): Promise<[string]>;

    v2PoolFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  migrate(
    asset: string,
    ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  v1PoolFactory(overrides?: CallOverrides): Promise<string>;

  v2PoolFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    migrate(
      asset: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    v1PoolFactory(overrides?: CallOverrides): Promise<string>;

    v2PoolFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Migrate(address,address,uint256[])"(
      asset?: null,
      caller?: null,
      ids?: null
    ): MigrateEventFilter;
    Migrate(asset?: null, caller?: null, ids?: null): MigrateEventFilter;
  };

  estimateGas: {
    migrate(
      asset: string,
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    v1PoolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    v2PoolFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    migrate(
      asset: string,
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    v1PoolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v2PoolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
